// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using LibWebApi.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace LibWebApi.Models
{
    public partial class LibDBContext
    {
        private ILibDBContextProcedures _procedures;

        public virtual ILibDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new LibDBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ILibDBContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class LibDBContextProcedures : ILibDBContextProcedures
    {
        private readonly LibDBContext _context;

        public LibDBContextProcedures(LibDBContext context)
        {
            _context = context;
        }

        public virtual async Task<int> usp_AddBookAsync(string title, string author, string iSBN, DateTime? publishedYear, int? availableCopies, OutputParameter<string> errorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorMessage = new SqlParameter
            {
                ParameterName = "ErrorMessage",
                Size = 200,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = errorMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 100,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Author",
                    Size = 100,
                    Value = author ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ISBN",
                    Size = 26,
                    Value = iSBN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PublishedYear",
                    Value = publishedYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AvailableCopies",
                    Value = availableCopies ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterErrorMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_AddBook] @Title = @Title, @Author = @Author, @ISBN = @ISBN, @PublishedYear = @PublishedYear, @AvailableCopies = @AvailableCopies, @ErrorMessage = @ErrorMessage OUTPUT", sqlParameters, cancellationToken);

            errorMessage?.SetValue(parameterErrorMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> usp_AddMemberAsync(string name, string email, string phone, DateTime? dateJoined, OutputParameter<string> errorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorMessage = new SqlParameter
            {
                ParameterName = "ErrorMessage",
                Size = 200,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = errorMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 100,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 100,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phone",
                    Size = 30,
                    Value = phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateJoined",
                    Value = dateJoined ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterErrorMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_AddMember] @Name = @Name, @Email = @Email, @Phone = @Phone, @DateJoined = @DateJoined, @ErrorMessage = @ErrorMessage OUTPUT", sqlParameters, cancellationToken);

            errorMessage?.SetValue(parameterErrorMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> usp_BookIssuedAsync(long? memberId, long? bookId, OutputParameter<string> errorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorMessage = new SqlParameter
            {
                ParameterName = "ErrorMessage",
                Size = 200,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = errorMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MemberId",
                    Value = memberId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BookId",
                    Value = bookId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterErrorMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_BookIssued] @MemberId = @MemberId, @BookId = @BookId, @ErrorMessage = @ErrorMessage OUTPUT", sqlParameters, cancellationToken);

            errorMessage?.SetValue(parameterErrorMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_GetAllBooksResult>> usp_GetAllBooksAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_GetAllBooksResult>("EXEC @returnValue = [dbo].[usp_GetAllBooks]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_GetAllBorrowedBooks_ByMemberIdResult>> usp_GetAllBorrowedBooks_ByMemberIdAsync(long? memberId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MemberId",
                    Value = memberId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_GetAllBorrowedBooks_ByMemberIdResult>("EXEC @returnValue = [dbo].[usp_GetAllBorrowedBooks_ByMemberId] @MemberId = @MemberId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_GetOverdueBooksResult>> usp_GetOverdueBooksAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_GetOverdueBooksResult>("EXEC @returnValue = [dbo].[usp_GetOverdueBooks]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_GetRecentFrequentBorrowersResult>> usp_GetRecentFrequentBorrowersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_GetRecentFrequentBorrowersResult>("EXEC @returnValue = [dbo].[usp_GetRecentFrequentBorrowers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_GetTop5MostBorrowedBooksResult>> usp_GetTop5MostBorrowedBooksAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_GetTop5MostBorrowedBooksResult>("EXEC @returnValue = [dbo].[usp_GetTop5MostBorrowedBooks]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> usp_ReturnBookAsync(long? borrowId, long? bookId, OutputParameter<string> errorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorMessage = new SqlParameter
            {
                ParameterName = "ErrorMessage",
                Size = 200,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = errorMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BorrowId",
                    Value = borrowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "BookId",
                    Value = bookId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterErrorMessage,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_ReturnBook] @BorrowId = @BorrowId, @BookId = @BookId, @ErrorMessage = @ErrorMessage OUTPUT", sqlParameters, cancellationToken);

            errorMessage?.SetValue(parameterErrorMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
